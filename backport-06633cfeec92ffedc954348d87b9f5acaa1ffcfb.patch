From 06633cfeec92ffedc954348d87b9f5acaa1ffcfb Mon Sep 17 00:00:00 2001
From: Dmitry Sidorov <dmitry.sidorov@intel.com>
Date: Wed, 19 Mar 2025 16:42:00 +0100
Subject: [PATCH] Add headers for SPV_INTEL_tensor_float32_conversion extension
 (#501)

Spec: https://github.com/KhronosGroup/SPIRV-Registry/pull/322

Signed-off-by: Sidorov, Dmitry <dmitry.sidorov@intel.com>
---
 include/spirv/unified1/spirv.bf                |  2 ++
 include/spirv/unified1/spirv.core.grammar.json | 18 ++++++++++++++++++
 include/spirv/unified1/spirv.cs                |  2 ++
 include/spirv/unified1/spirv.h                 |  5 +++++
 include/spirv/unified1/spirv.hpp               |  5 +++++
 include/spirv/unified1/spirv.hpp11             |  5 +++++
 include/spirv/unified1/spirv.json              |  2 ++
 include/spirv/unified1/spirv.lua               |  2 ++
 include/spirv/unified1/spirv.py                |  2 ++
 include/spirv/unified1/spv.d                   |  2 ++
 10 files changed, 45 insertions(+)

diff --git a/include/spirv/unified1/spirv.bf b/include/spirv/unified1/spirv.bf
index 76037ce..ff17530 100644
--- a/include/spirv/unified1/spirv.bf
+++ b/include/spirv/unified1/spirv.bf
@@ -1305,6 +1305,7 @@ namespace Spv
             Subgroup2DBlockTransposeINTEL = 6230,
             SubgroupMatrixMultiplyAccumulateINTEL = 6236,
             GroupUniformArithmeticKHR = 6400,
+            TensorFloat32RoundingINTEL = 6425,
             MaskedGatherScatterINTEL = 6427,
             CacheControlsINTEL = 6441,
             RegisterLimitsINTEL = 6460,
@@ -2431,6 +2432,7 @@ namespace Spv
             OpGroupLogicalAndKHR = 6406,
             OpGroupLogicalOrKHR = 6407,
             OpGroupLogicalXorKHR = 6408,
+            OpRoundFToTF32INTEL = 6426,
             OpMaskedGatherINTEL = 6428,
             OpMaskedScatterINTEL = 6429,
             Max = 0x7fffffff,
diff --git a/include/spirv/unified1/spirv.core.grammar.json b/include/spirv/unified1/spirv.core.grammar.json
index 8201b18..c230caf 100644
--- a/include/spirv/unified1/spirv.core.grammar.json
+++ b/include/spirv/unified1/spirv.core.grammar.json
@@ -10691,6 +10691,18 @@
       "capabilities" : [ "GroupUniformArithmeticKHR" ],
       "version" : "None"
     },
+    {
+      "opname" : "OpRoundFToTF32INTEL",
+      "class"  : "Conversion",
+      "opcode" : 6426,
+      "operands" : [
+        { "kind" : "IdResultType" },
+        { "kind" : "IdResult" },
+        { "kind" : "IdRef",        "name" : "'Float Value'" }
+      ],
+      "capabilities" : [ "TensorFloat32RoundingINTEL" ],
+      "version" : "None"
+    },
     {
       "opname" : "OpMaskedGatherINTEL",
       "class"  : "Memory",
@@ -17174,6 +17186,12 @@
           "extensions" : [ "SPV_KHR_uniform_group_instructions"],
           "version" : "None"
         },
+        {
+          "enumerant" : "TensorFloat32RoundingINTEL",
+          "value" : 6425,
+          "extensions" : [ "SPV_INTEL_tensor_float32_conversion" ],
+          "version" : "None"
+        },
         {
           "enumerant" : "MaskedGatherScatterINTEL",
           "value" : 6427,
diff --git a/include/spirv/unified1/spirv.cs b/include/spirv/unified1/spirv.cs
index 9f7cfaa..e491c7a 100644
--- a/include/spirv/unified1/spirv.cs
+++ b/include/spirv/unified1/spirv.cs
@@ -1304,6 +1304,7 @@ namespace Spv
             Subgroup2DBlockTransposeINTEL = 6230,
             SubgroupMatrixMultiplyAccumulateINTEL = 6236,
             GroupUniformArithmeticKHR = 6400,
+            TensorFloat32RoundingINTEL = 6425,
             MaskedGatherScatterINTEL = 6427,
             CacheControlsINTEL = 6441,
             RegisterLimitsINTEL = 6460,
@@ -2430,6 +2431,7 @@ namespace Spv
             OpGroupLogicalAndKHR = 6406,
             OpGroupLogicalOrKHR = 6407,
             OpGroupLogicalXorKHR = 6408,
+            OpRoundFToTF32INTEL = 6426,
             OpMaskedGatherINTEL = 6428,
             OpMaskedScatterINTEL = 6429,
             Max = 0x7fffffff,
diff --git a/include/spirv/unified1/spirv.h b/include/spirv/unified1/spirv.h
index 18f3eb0..035441a 100644
--- a/include/spirv/unified1/spirv.h
+++ b/include/spirv/unified1/spirv.h
@@ -1275,6 +1275,7 @@ typedef enum SpvCapability_ {
     SpvCapabilitySubgroup2DBlockTransposeINTEL = 6230,
     SpvCapabilitySubgroupMatrixMultiplyAccumulateINTEL = 6236,
     SpvCapabilityGroupUniformArithmeticKHR = 6400,
+    SpvCapabilityTensorFloat32RoundingINTEL = 6425,
     SpvCapabilityMaskedGatherScatterINTEL = 6427,
     SpvCapabilityCacheControlsINTEL = 6441,
     SpvCapabilityRegisterLimitsINTEL = 6460,
@@ -2367,6 +2368,7 @@ typedef enum SpvOp_ {
     SpvOpGroupLogicalAndKHR = 6406,
     SpvOpGroupLogicalOrKHR = 6407,
     SpvOpGroupLogicalXorKHR = 6408,
+    SpvOpRoundFToTF32INTEL = 6426,
     SpvOpMaskedGatherINTEL = 6428,
     SpvOpMaskedScatterINTEL = 6429,
     SpvOpMax = 0x7fffffff,
@@ -3165,6 +3167,7 @@ inline void SpvHasResultAndType(SpvOp opcode, bool *hasResult, bool *hasResultTy
     case SpvOpGroupLogicalAndKHR: *hasResult = true; *hasResultType = true; break;
     case SpvOpGroupLogicalOrKHR: *hasResult = true; *hasResultType = true; break;
     case SpvOpGroupLogicalXorKHR: *hasResult = true; *hasResultType = true; break;
+    case SpvOpRoundFToTF32INTEL: *hasResult = true; *hasResultType = true; break;
     case SpvOpMaskedGatherINTEL: *hasResult = true; *hasResultType = true; break;
     case SpvOpMaskedScatterINTEL: *hasResult = false; *hasResultType = false; break;
     }
@@ -4109,6 +4112,7 @@ inline const char* SpvCapabilityToString(SpvCapability value) {
     case SpvCapabilitySubgroup2DBlockTransposeINTEL: return "Subgroup2DBlockTransposeINTEL";
     case SpvCapabilitySubgroupMatrixMultiplyAccumulateINTEL: return "SubgroupMatrixMultiplyAccumulateINTEL";
     case SpvCapabilityGroupUniformArithmeticKHR: return "GroupUniformArithmeticKHR";
+    case SpvCapabilityTensorFloat32RoundingINTEL: return "TensorFloat32RoundingINTEL";
     case SpvCapabilityMaskedGatherScatterINTEL: return "MaskedGatherScatterINTEL";
     case SpvCapabilityCacheControlsINTEL: return "CacheControlsINTEL";
     case SpvCapabilityRegisterLimitsINTEL: return "RegisterLimitsINTEL";
@@ -5089,6 +5093,7 @@ inline const char* SpvOpToString(SpvOp value) {
     case SpvOpGroupLogicalAndKHR: return "OpGroupLogicalAndKHR";
     case SpvOpGroupLogicalOrKHR: return "OpGroupLogicalOrKHR";
     case SpvOpGroupLogicalXorKHR: return "OpGroupLogicalXorKHR";
+    case SpvOpRoundFToTF32INTEL: return "OpRoundFToTF32INTEL";
     case SpvOpMaskedGatherINTEL: return "OpMaskedGatherINTEL";
     case SpvOpMaskedScatterINTEL: return "OpMaskedScatterINTEL";
     default: return "Unknown";
diff --git a/include/spirv/unified1/spirv.hpp b/include/spirv/unified1/spirv.hpp
index 99a0317..a5c5264 100644
--- a/include/spirv/unified1/spirv.hpp
+++ b/include/spirv/unified1/spirv.hpp
@@ -1271,6 +1271,7 @@ enum Capability {
     CapabilitySubgroup2DBlockTransposeINTEL = 6230,
     CapabilitySubgroupMatrixMultiplyAccumulateINTEL = 6236,
     CapabilityGroupUniformArithmeticKHR = 6400,
+    CapabilityTensorFloat32RoundingINTEL = 6425,
     CapabilityMaskedGatherScatterINTEL = 6427,
     CapabilityCacheControlsINTEL = 6441,
     CapabilityRegisterLimitsINTEL = 6460,
@@ -2363,6 +2364,7 @@ enum Op {
     OpGroupLogicalAndKHR = 6406,
     OpGroupLogicalOrKHR = 6407,
     OpGroupLogicalXorKHR = 6408,
+    OpRoundFToTF32INTEL = 6426,
     OpMaskedGatherINTEL = 6428,
     OpMaskedScatterINTEL = 6429,
     OpMax = 0x7fffffff,
@@ -3161,6 +3163,7 @@ inline void HasResultAndType(Op opcode, bool *hasResult, bool *hasResultType) {
     case OpGroupLogicalAndKHR: *hasResult = true; *hasResultType = true; break;
     case OpGroupLogicalOrKHR: *hasResult = true; *hasResultType = true; break;
     case OpGroupLogicalXorKHR: *hasResult = true; *hasResultType = true; break;
+    case OpRoundFToTF32INTEL: *hasResult = true; *hasResultType = true; break;
     case OpMaskedGatherINTEL: *hasResult = true; *hasResultType = true; break;
     case OpMaskedScatterINTEL: *hasResult = false; *hasResultType = false; break;
     }
@@ -4105,6 +4108,7 @@ inline const char* CapabilityToString(Capability value) {
     case CapabilitySubgroup2DBlockTransposeINTEL: return "Subgroup2DBlockTransposeINTEL";
     case CapabilitySubgroupMatrixMultiplyAccumulateINTEL: return "SubgroupMatrixMultiplyAccumulateINTEL";
     case CapabilityGroupUniformArithmeticKHR: return "GroupUniformArithmeticKHR";
+    case CapabilityTensorFloat32RoundingINTEL: return "TensorFloat32RoundingINTEL";
     case CapabilityMaskedGatherScatterINTEL: return "MaskedGatherScatterINTEL";
     case CapabilityCacheControlsINTEL: return "CacheControlsINTEL";
     case CapabilityRegisterLimitsINTEL: return "RegisterLimitsINTEL";
@@ -5085,6 +5089,7 @@ inline const char* OpToString(Op value) {
     case OpGroupLogicalAndKHR: return "OpGroupLogicalAndKHR";
     case OpGroupLogicalOrKHR: return "OpGroupLogicalOrKHR";
     case OpGroupLogicalXorKHR: return "OpGroupLogicalXorKHR";
+    case OpRoundFToTF32INTEL: return "OpRoundFToTF32INTEL";
     case OpMaskedGatherINTEL: return "OpMaskedGatherINTEL";
     case OpMaskedScatterINTEL: return "OpMaskedScatterINTEL";
     default: return "Unknown";
diff --git a/include/spirv/unified1/spirv.hpp11 b/include/spirv/unified1/spirv.hpp11
index 3b1a147..135475a 100644
--- a/include/spirv/unified1/spirv.hpp11
+++ b/include/spirv/unified1/spirv.hpp11
@@ -1271,6 +1271,7 @@ enum class Capability : unsigned {
     Subgroup2DBlockTransposeINTEL = 6230,
     SubgroupMatrixMultiplyAccumulateINTEL = 6236,
     GroupUniformArithmeticKHR = 6400,
+    TensorFloat32RoundingINTEL = 6425,
     MaskedGatherScatterINTEL = 6427,
     CacheControlsINTEL = 6441,
     RegisterLimitsINTEL = 6460,
@@ -2363,6 +2364,7 @@ enum class Op : unsigned {
     OpGroupLogicalAndKHR = 6406,
     OpGroupLogicalOrKHR = 6407,
     OpGroupLogicalXorKHR = 6408,
+    OpRoundFToTF32INTEL = 6426,
     OpMaskedGatherINTEL = 6428,
     OpMaskedScatterINTEL = 6429,
     Max = 0x7fffffff,
@@ -3161,6 +3163,7 @@ inline void HasResultAndType(Op opcode, bool *hasResult, bool *hasResultType) {
     case Op::OpGroupLogicalAndKHR: *hasResult = true; *hasResultType = true; break;
     case Op::OpGroupLogicalOrKHR: *hasResult = true; *hasResultType = true; break;
     case Op::OpGroupLogicalXorKHR: *hasResult = true; *hasResultType = true; break;
+    case Op::OpRoundFToTF32INTEL: *hasResult = true; *hasResultType = true; break;
     case Op::OpMaskedGatherINTEL: *hasResult = true; *hasResultType = true; break;
     case Op::OpMaskedScatterINTEL: *hasResult = false; *hasResultType = false; break;
     }
@@ -4105,6 +4108,7 @@ inline const char* CapabilityToString(Capability value) {
     case Capability::Subgroup2DBlockTransposeINTEL: return "Subgroup2DBlockTransposeINTEL";
     case Capability::SubgroupMatrixMultiplyAccumulateINTEL: return "SubgroupMatrixMultiplyAccumulateINTEL";
     case Capability::GroupUniformArithmeticKHR: return "GroupUniformArithmeticKHR";
+    case Capability::TensorFloat32RoundingINTEL: return "TensorFloat32RoundingINTEL";
     case Capability::MaskedGatherScatterINTEL: return "MaskedGatherScatterINTEL";
     case Capability::CacheControlsINTEL: return "CacheControlsINTEL";
     case Capability::RegisterLimitsINTEL: return "RegisterLimitsINTEL";
@@ -5085,6 +5089,7 @@ inline const char* OpToString(Op value) {
     case Op::OpGroupLogicalAndKHR: return "OpGroupLogicalAndKHR";
     case Op::OpGroupLogicalOrKHR: return "OpGroupLogicalOrKHR";
     case Op::OpGroupLogicalXorKHR: return "OpGroupLogicalXorKHR";
+    case Op::OpRoundFToTF32INTEL: return "OpRoundFToTF32INTEL";
     case Op::OpMaskedGatherINTEL: return "OpMaskedGatherINTEL";
     case Op::OpMaskedScatterINTEL: return "OpMaskedScatterINTEL";
     default: return "Unknown";
diff --git a/include/spirv/unified1/spirv.json b/include/spirv/unified1/spirv.json
index 87dfae1..c006a56 100644
--- a/include/spirv/unified1/spirv.json
+++ b/include/spirv/unified1/spirv.json
@@ -1247,6 +1247,7 @@
                     "Subgroup2DBlockTransposeINTEL": 6230,
                     "SubgroupMatrixMultiplyAccumulateINTEL": 6236,
                     "GroupUniformArithmeticKHR": 6400,
+                    "TensorFloat32RoundingINTEL": 6425,
                     "MaskedGatherScatterINTEL": 6427,
                     "CacheControlsINTEL": 6441,
                     "RegisterLimitsINTEL": 6460
@@ -2350,6 +2351,7 @@
                     "OpGroupLogicalAndKHR": 6406,
                     "OpGroupLogicalOrKHR": 6407,
                     "OpGroupLogicalXorKHR": 6408,
+                    "OpRoundFToTF32INTEL": 6426,
                     "OpMaskedGatherINTEL": 6428,
                     "OpMaskedScatterINTEL": 6429
                 }
diff --git a/include/spirv/unified1/spirv.lua b/include/spirv/unified1/spirv.lua
index f517cdb..b974b53 100644
--- a/include/spirv/unified1/spirv.lua
+++ b/include/spirv/unified1/spirv.lua
@@ -1262,6 +1262,7 @@ spv = {
         Subgroup2DBlockTransposeINTEL = 6230,
         SubgroupMatrixMultiplyAccumulateINTEL = 6236,
         GroupUniformArithmeticKHR = 6400,
+        TensorFloat32RoundingINTEL = 6425,
         MaskedGatherScatterINTEL = 6427,
         CacheControlsINTEL = 6441,
         RegisterLimitsINTEL = 6460,
@@ -2354,6 +2355,7 @@ spv = {
         OpGroupLogicalAndKHR = 6406,
         OpGroupLogicalOrKHR = 6407,
         OpGroupLogicalXorKHR = 6408,
+        OpRoundFToTF32INTEL = 6426,
         OpMaskedGatherINTEL = 6428,
         OpMaskedScatterINTEL = 6429,
         Max = 0x7fffffff,
diff --git a/include/spirv/unified1/spirv.py b/include/spirv/unified1/spirv.py
index 343c3c4..46594f4 100644
--- a/include/spirv/unified1/spirv.py
+++ b/include/spirv/unified1/spirv.py
@@ -1233,6 +1233,7 @@ spv = {
         'Subgroup2DBlockTransposeINTEL' : 6230,
         'SubgroupMatrixMultiplyAccumulateINTEL' : 6236,
         'GroupUniformArithmeticKHR' : 6400,
+        'TensorFloat32RoundingINTEL' : 6425,
         'MaskedGatherScatterINTEL' : 6427,
         'CacheControlsINTEL' : 6441,
         'RegisterLimitsINTEL' : 6460,
@@ -2298,6 +2299,7 @@ spv = {
         'OpGroupLogicalAndKHR' : 6406,
         'OpGroupLogicalOrKHR' : 6407,
         'OpGroupLogicalXorKHR' : 6408,
+        'OpRoundFToTF32INTEL' : 6426,
         'OpMaskedGatherINTEL' : 6428,
         'OpMaskedScatterINTEL' : 6429,
     },
diff --git a/include/spirv/unified1/spv.d b/include/spirv/unified1/spv.d
index 52edac9..fa4840e 100644
--- a/include/spirv/unified1/spv.d
+++ b/include/spirv/unified1/spv.d
@@ -1307,6 +1307,7 @@ enum Capability : uint
     Subgroup2DBlockTransposeINTEL = 6230,
     SubgroupMatrixMultiplyAccumulateINTEL = 6236,
     GroupUniformArithmeticKHR = 6400,
+    TensorFloat32RoundingINTEL = 6425,
     MaskedGatherScatterINTEL = 6427,
     CacheControlsINTEL = 6441,
     RegisterLimitsINTEL = 6460,
@@ -2433,6 +2434,7 @@ enum Op : uint
     OpGroupLogicalAndKHR = 6406,
     OpGroupLogicalOrKHR = 6407,
     OpGroupLogicalXorKHR = 6408,
+    OpRoundFToTF32INTEL = 6426,
     OpMaskedGatherINTEL = 6428,
     OpMaskedScatterINTEL = 6429,
     Max = 0x7fffffff,
-- 
2.49.0

